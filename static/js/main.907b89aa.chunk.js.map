{"version":3,"sources":["components/Profile/Profile.module.css","components/ParsingPlantItems/ParsingItem.module.css","components/Stats/Stats.module.css","components/TransactionHistory/TransactionHistory.module.css","components/Profile/Profile.js","components/Stats/Stats.js","components/ParsingPlantItems/PricingItem.js","components/ParsingPlantItems/PricisingPlan.js","components/TransactionHistory/TransactionHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","wrapper","container","avatar","name","text","stats","item","icon","label","capacity","description","price","button","plan","title","list","percentage","header","line","Profile","_ref","tag","location","react_default","a","createElement","react","className","styles","src","alt","followers","views","likes","bgColor","id","color","Stats","map","key","style","backgroundColor","getColor","itemColor","PricingItem","backgroundImage","concat","display","type","PricisingPlan","pricingList","ParsingPlantItems_PricingItem","TransactionHistory","transactionList","amount","currency","user","App","components_Profile_Profile","components_Stats_Stats","ParsingPlantItems_PricisingPlan","components_TransactionHistory_TransactionHistory","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.907b89aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__1DHmI\",\"container\":\"Profile_container__1An4G\",\"avatar\":\"Profile_avatar__2uB8n\",\"name\":\"Profile_name__3eUIT\",\"text\":\"Profile_text__1U76y\",\"stats\":\"Profile_stats__2r2Bi\",\"item\":\"Profile_item__2nCMu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ParsingItem_item__31Umh\",\"icon\":\"ParsingItem_icon__38fZe\",\"label\":\"ParsingItem_label__2Tk0y\",\"capacity\":\"ParsingItem_capacity__2hZTp\",\"description\":\"ParsingItem_description__3mQt4\",\"price\":\"ParsingItem_price__1o-Bq\",\"button\":\"ParsingItem_button__F24JG\",\"plan\":\"ParsingItem_plan__1y592\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Stats_wrapper__2cO1b\",\"stats\":\"Stats_stats__Y_pNL\",\"title\":\"Stats_title__1fST5\",\"list\":\"Stats_list__zrwp8\",\"item\":\"Stats_item__3thlh\",\"label\":\"Stats_label__3UNr9\",\"percentage\":\"Stats_percentage__1sscx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"TransactionHistory_header__LMx4M\",\"line\":\"TransactionHistory_line__3hjaR\"};","import React, {Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Profile.module.css';\n\nconst Profile = ({avatar, name, tag, location, stats}) => (\n  <Fragment className={styles.wrapper}>\n    <div className={styles.container}>\n      <img src={avatar} alt=\"user avatar\" className={styles.avatar} />\n      <p className={styles.name}> {name}</p>\n      <p className={styles.text}> {tag} </p>\n      <p className={styles.text}> {location} </p>\n    </div>\n    <ul className={styles.stats}>\n      <li className={styles.item}>\n        <span className={styles.text}> Followers </span>\n        <span className={styles.name}> {stats.followers} </span>\n      </li>\n      <li className={styles.item}>\n        <span className={styles.text}> Views </span>\n        <span className={styles.name}> {stats.views} </span>\n      </li>\n      <li className={styles.item}>\n        <span className={styles.text}> Likes </span>\n        <span className={styles.name}> {stats.likes} </span>\n      </li>\n    </ul>\n  </Fragment>\n);\n\nProfile.propTypes = {\n  avatar: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  tag: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  stats: PropTypes.objectOf(\n      PropTypes.shape({\n        followers: PropTypes.object.isRequired,\n        views: PropTypes.number.isRequired,\n        likes: PropTypes.number.isRequired,\n      }),\n  ).isRequired,\n};\n\nexport default Profile;\n","import React, {Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Stats.module.css';\n\nfunction bgColor(id) {\n  let color = '';\n\n  switch (id) {\n    case 'id-1':\n      color = '#4fc4f6';\n      break;\n    case 'id-2':\n      color = '#a33cf2';\n      break;\n    case 'id-3':\n      color = '#e64c65';\n      break;\n    case 'id-4':\n      color = '#21b8c6';\n      break;\n    default:\n      color = '#bbc621';\n  }\n\n  return color;\n}\n\nconst Stats = ({title, stats}) => (\n  <Fragment className={styles.wrapper}>\n    <div className={styles.stats}>\n      {!!title && <h2 className={styles.title}>{title}</h2>}\n    </div>\n    <ul className={styles.list}>\n      {stats.map((item) => (\n        <li\n          className={styles.item}\n          key={item.id}\n          style={{backgroundColor: bgColor(item.id)}}\n        >\n          <span className={styles.label}> {item.label} </span>\n          <span className={styles.percentage}>{item.percentage}%</span>\n        </li>\n      ))}\n    </ul>\n  </Fragment>\n);\n\nStats.propTypes = {\n  title: PropTypes.string,\n  stats: PropTypes.objectOf(\n      PropTypes.shape({\n        followers: PropTypes.number.isRequired,\n        views: PropTypes.number.isRequired,\n        likes: PropTypes.number.isRequired,\n      }),\n  ).isRequired,\n};\n\nexport default Stats;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ParsingItem.module.css';\n\nfunction getColor(label) {\n  let itemColor = '';\n\n  switch (label) {\n    case 'Bronze':\n      itemColor = '#dd7c4b';\n      break;\n    case 'Silver':\n      itemColor = '#c0c0c0';\n      break;\n    case 'Gold':\n      itemColor = '#dda431';\n      break;\n    default:\n      itemColor = '#31d7dd';\n  }\n  return itemColor;\n}\n\nconst PricingItem = ({label, icon, capacity, price, description}) => (\n  <li className={styles.item}>\n    <div className=\"pricing-item\">\n      <i\n        className={styles.icon}\n        style={{backgroundImage: `url(${icon})`, display: 'inline-block'}}\n      />\n      <h2 className={styles.label} style={{color: getColor(label)}}>\n        {label}\n      </h2>\n      <p className={styles.capacity}>{capacity}</p>\n      <p className={styles.description}>{description}</p>\n      <p className={styles.price}>$39/MO</p>\n      <button\n        style={{backgroundColor: getColor(label)}}\n        className={styles.button}\n        type=\"button\"\n      >\n        Get Started\n      </button>\n    </div>\n  </li>\n);\n\nPricingItem.propTypes = {\n  label: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired,\n  capacity: PropTypes.string.isRequired,\n  price: PropTypes.number.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\nexport default PricingItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PricingItem from './PricingItem';\nimport styles from './ParsingItem.module.css';\n\nconst PricisingPlan = ({pricingList}) => (\n  <ul className={styles.plan}>\n    {pricingList.map((item) => (\n      <PricingItem\n        key={item.label}\n        icon={item.icon}\n        label={item.label}\n        capacity={item.capacity}\n        description={item.description}\n        price={item.price}\n      />\n    ))}\n  </ul>\n);\n\nPricisingPlan.propTypes = {\n  pricingList: PropTypes.objectOf(\n      PropTypes.shape({\n        label: PropTypes.string.isRequired,\n        icon: PropTypes.string.isRequired,\n        capacity: PropTypes.string.isRequired,\n        price: PropTypes.number.isRequired,\n        description: PropTypes.string.isRequired,\n      }),\n  ).isRequired,\n};\n\nexport default PricisingPlan;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './TransactionHistory.module.css';\n\nconst TransactionHistory = ({transactionList}) => (\n  <table className={styles.header}>\n    <thead>\n      <tr>\n        <th>Type</th>\n        <th>Amount</th>\n        <th>Currency</th>\n      </tr>\n    </thead>\n    <tbody>\n      {transactionList.map((item) => (\n        <tr className={styles.line} key={item.id}>\n          <td>{item.type}</td>\n          <td>{item.amount}</td>\n          <td>{item.currency}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nTransactionHistory.propTypes = {\n  transactionList: PropTypes.objectOf(\n      PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        amount: PropTypes.number.isRequired,\n        currency: PropTypes.number.isRequired,\n      }),\n  ).isRequired,\n};\n\nexport default TransactionHistory;\n","import React, {Component} from 'react';\nimport './App.css';\nimport pricingList from './components/ParsingPlantItems/pricing-plan.json';\n// eslint-disable-next-line max-len\nimport transactionList from './components/TransactionHistory/transactionList.json';\nimport Profile from './components/Profile/Profile';\nimport Stats from './components/Stats/Stats';\nimport PricisingPlan from './components/ParsingPlantItems/PricisingPlan';\n// eslint-disable-next-line max-len\nimport TransactionHistory from './components/TransactionHistory/TransactionHistory';\n\nconst user = {\n  name: 'Jacques Gluke',\n  tag: '@jgluke',\n  location: 'Ocho Rios, Jamaica',\n  avatar:\n    'http://okcolab.sasquatchstudio.co/wp-content/uploads/2017/05/avatar-sample.jpg',\n  stats: {\n    followers: 5603,\n    views: 4827,\n    likes: 1308,\n  },\n};\n\nconst stats = [\n  {id: 'id-1', label: '.docx', percentage: 22},\n  {id: 'id-2', label: '.pdf', percentage: 4},\n  {id: 'id-3', label: '.mp3', percentage: 17},\n  {id: 'id-4', label: '.psd', percentage: 47},\n  {id: 'id-5', label: '.pdf', percentage: 10},\n];\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Profile\n          name={user.name}\n          tag={user.tag}\n          avatar={user.avatar}\n          location={user.location}\n          stats={user.stats}\n        />\n        <Stats title=\"Upload stats\" stats={stats} />\n        <PricisingPlan pricingList={pricingList} />\n        <TransactionHistory transactionList={transactionList} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n      .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.',\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}